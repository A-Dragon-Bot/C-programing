编程软件：DEV C++
学习计划：每天刷两个算法练习题
练习题来源：《啊哈算法》
2018-9-4
算法1.桶排序
时间度为O（M+N）
代码1
#include<stdio.h>
#include<string.h>
int main(){
	int a[11];
	memset(a,0,sizeof(a));
	int i,j,t;
	for(i=0;i<5;i++){
		scanf("%d",&t);
		a[t]++;
	}
	//从小到大排序 
	for(j=0;j<=10;j++){
		for(i=1;i<=a[j];i++){
			printf("%d ",j);
		}
	}
	getchar();
	getchar();
	//getchar();用来暂停程序，方便看输出的内容 
	return 0;
} 
代码2
#include<stdio.h>
int main(){
	int n,a[1001],i,j,t;
	for(i=0;i<=1000;i++)
	   a[i]=0;
	scanf("%d",&n);
	for(i=0;i<n;i++){
		scanf("%d",&t);
		a[t]++;
	}
	//从大到小排序
	for(i=1000;i>=0;i--)
	    for(j=0;j<a[i];j++)
		printf("%d ",i);
	getchar();
	getchar();
	return 0; 
} 
2018-9-5
算法2：冒泡排序
时间复杂度：O(N^2)
代码1
#include<stdio.h>
int main(){
	int i,j,tem,n,a[100];
	scanf("%d",&n);
	for(int i=0;i<n;i++)
	 scanf("%d",&a[i]);
	//从小到大排序 
	for(i=0;i<n;i++){
		for(j=0;j<n-i-1;j++){
			if(a[j]>a[j+1]){
				tem=a[j];
				a[j]=a[j+1];
				a[j+1]=tem;
			}
		}
	}
	for(i=0;i<n;i++){
		printf("%d ",a[i]);
	}
	getchar();getchar();
	return 0;
}
代码2
#include<stdio.h>
int main(){
	int i,j,tem,n,a[100];
	scanf("%d",&n);
	for(int i=0;i<n;i++)
	 scanf("%d",&a[i]);
	//从大到小排序 
	for(i=0;i<n;i++){
		for(j=0;j<n-i-1;j++){
			if(a[j]<a[j+1]){
				tem=a[j];
				a[j]=a[j+1];
				a[j+1]=tem;
			}
		}
	}
	for(i=0;i<n;i++){
		printf("%d ",a[i]);
	}
	getchar();getchar();
	return 0;
}

2018-9-6
算法2：冒泡排序
代码3
#include<stdio.h>
struct student{
	char name[20];
	int score;
}; 
int main(){
    struct student a[100],t;
	int n,i,j;
	scanf("%d",&n);
	for(int i=0;i<n;i++){
		scanf("%s %d",&a[i].name,&a[i].score);
	}
	for(i=0;i<n;i++){
		for(j=0;j<n-1-i;j++){
			if(a[j].score<a[j+1].score){
				t=a[j];
				a[j]=a[j+1];
				a[j+1]=t;
			}
		}
	}
	for(int i=0;i<n;i++)
	    printf("%s\n",a[i].name);
	return 0;
}

算法3：快速排序
平均时间复杂度：O(nlogn)
#include<stdio.h>
int a[101],n;
void quicksort(int left,int right){
	int i,j,t,tem;
	if(left>right)
	  return;
	
	tem=a[left];
	i=left;
	j=right;
	
	while(i!=j){
		while(a[j]>=tem&&i<j)
		   j--;
		while(a[i]<=tem&&i<j)
		   i++;
		if(i<j){
			t=a[i];
			a[i]=a[j];
			a[j]=t;
		}
	}
	a[left]=a[i];
	a[i]=tem;
	
	quicksort(left,i-1);
	quicksort(i+1,right);
	return;
}
int main(){
	int i,j;
	scanf("%d",&n);
	for(i=1;i<=n;i++)
	   scanf("%d",&a[i]);
	quicksort(1,n);
	for(i=1;i<=n;i++){
		printf("%d\n",a[i]);
	}
	return 0;
}
2018-9-7
去重并排序
代码1：
//桶排序 先去重后排序
#include <stdio.h>
int main(){
	int a[1001],n,i,t;
	for(i=1;i<=1000;i++)
	   a[i]=0;
	scanf("%d",&n);
	for(i=1;i<=n;i++){
		scanf("%d",&t);
		a[t]=1;
	}
	for(i=1;i<=1000;i++){
		if(a[i]==1){
			  printf("%d ",i);
		}
	}
	return 0;
}
代码2：
//冒泡排序 先排序后去重
去重：排序之后，如果有相邻元素相等，则不用再输出。若不相等则表示该数是第一次出现，需要输出。
#include<stdio.h>
int main(){
	int n,i,j,a[101],tem;
	scanf("%d",&n);
	for(i=0;i<n;i++){
		scanf("%d",&a[i]);
	}
	//冒泡排序  从小到大排序 
	for(i=0;i<n;i++){
		for(j=0;j<n-1-i;j++){
			if(a[j]>a[j+1]){
				tem=a[j];
				a[j]=a[j+1];
				a[j+1]=tem;
			}
		}
	}
	printf("%d ",a[0]);
	for(i=1;i<n;i++){
		if(a[i]==a[i-1])
		   continue;
		else
		   printf("%d ",a[i]);
	}
	
}

2018-9-8
算法：队列
模拟队列
代码1：
#include<stdio.h>
int main(){
	int q[102]={0,6,3,1,7,5,8,9,2,4},head,tail; 
	head=1;
	tail=10;
	while(head<tail){
		printf("%d ",q[head]);
		head++;
		
		q[tail]=q[head];
		tail++;
		head++;
	}
	getchar();getchar();
	return 0;
} 
题：字符串循环右移2位
代码:
#include<iostream>
#include<cstring>
using namespace std;
int main(){
	char s[101],c[3];
	int len;
	while(cin>>s){
		len=strlen(s);
		c[0]=s[len-2];
		c[1]=s[len-1];
		for(int i=len-1;i>=0;i--){
			s[i]=s[i-2];
		}
		s[0]=c[0];
		s[1]=c[1];
		for(int i=0;i<len;i++){
			cout<<s[i];
		}
		cout<<endl;
		
	}
	return 0;
}
变式题：字符串循环右移n位
代码1：时间复杂度O(N)
#include<iostream>
#include<cstring>
using namespace std;
int main(){
	char s[101],c[101];
	int len,n;
	while(cin>>s>>n){
		len=strlen(s);
		n=n%len;
		int k=n;
		for(int i=0,j=k;i<n;i++){
			c[i]=s[len-k];
			k--;
		}
		for(int i=len-1;i>=0;i--){
			s[i]=s[i-n];
		}
		for(int i=0;i<n;i++)
		     s[i]=c[i];
		for(int i=0;i<len;i++){
			cout<<s[i];
		}
		cout<<endl;
		
	}
	return 0;
}
代码2：时间复杂度O(M*N)
#include<stdio.h>
#include<cstring>
#define maxSize 100
int main(){
	int len,n,k,i,m;
	char tem;
	char s[maxSize];
	scanf("%s %d",s,&n);
	len=strlen(s);
	int j=len-1;
	for(i=1;i<=n;i++){
		k=j-1;
		tem=s[j];
		while(k>=0){
			s[k+1]=s[k];
			k--;
		}
		s[0]=tem;
	}
	printf("%s\n",s);
	return 0;
	
}
代码3：
#include<iostream>
#include<cstring>
using namespace std;
int main(){
	char s[101];
	int n,m,len;
	while(cin>>s>>n){
		len=strlen(s);
		m=len-n;
		for(int i=m;i<len;i++)
			cout<<s[i]; 
		for(int j=0;j<m;j++)
		    cout<<s[j];
		cout<<endl;
	}
	return 0;
}

2018-9-9
题：解密qq号
数据结构：队列
//使用结构体来实现队列
代码：
#include<stdio.h>
struct queue{
	int data[100];
	int head;
	int tail;
}; 
int main(){
	struct queue q;
	int i;
	//初始化队列 
	q.head=1;
	q.tail=1;
	for(i=1;i<=9;i++){
		//依次向队列插入9个数 
		scanf("%d",&q.data[q.tail]);
		//printf("%d ",q.data[q.tail]);
		q.tail++; 
	}
	//printf("test!\n"); 
	while(q.head<q.tail){ //当队列不为空时执行循环
	     //打印队首元素，并将队首出队
		 printf("%d ",q.data[q.head]);
		 q.head++;
		 
		 //将新队首元素添加到队尾
		 q.data[q.tail]=q.data[q.head];
		 q.tail++;
		 q.head++; 
		
	}
	getchar();
	getchar();
	return 0;
}

题：解密回文
数据结构：栈
解题思路：输入字符串，获取长度，如果字符串为回文字符串，则该字符串是中间对称的，先求中点，将中点之前的字符全部入栈，然后将当前栈的字符
依次出栈，看是否与mid之后的字符一一匹配，若匹配，则该字符串为回文字符串，否则不是。
代码：
#include<stdio.h>
#include<string.h>
int main(){
	char a[101],b[101];
	int i,len,mid,next,top;
	gets(a);
	len=strlen(a);
	mid=len/2-1;
	
	top=0;//栈初始化
	//将mid之前的字符依次入栈 
	for(i=0;i<=mid;i++){
		b[++top]=a[i];
	} 
	//判断字符串的长度是奇还是偶，并找出需要进行字符匹配的起始坐标 
	if(len%2==0){
		mid=mid+1;
	}else{
		mid=mid+2;
	}
	
	//开始匹配 
	for(i=mid;i<len;i++){
		if(b[top]!=a[i])
		   break;
		top--;
	} 
	//如果top的值为0，则说明栈内所有字符都被一一匹配了
	if(top==0){
		printf("Yes\n");
	} else{
		printf("No\n");
	}
	return 0;
	
	
}

题目：模拟扑克游戏“排火车”，每个人轮流出牌（假定每个人手里有6张牌，牌的大小都不超过去10），直到两个人所出牌的数字相同，后者可以得到两张牌以及中间所夹的所有牌，直到所有牌全到一个人手上，就谁赢。
解题思路：将两个人的手中的牌用队列q1，q2模拟，桌上的牌用栈s模拟。先将队列和栈初始化，然后两个人手上依次读入牌，将牌入队列，当一个人出牌时，就将牌出队。我们将这个牌存入临时变量中，并与在桌上的牌依次比对有没有相同的，若没有相同的，将flag置为0，表示，此人打出的牌都留在了桌上，若有相同的，则将赢得的牌依次放入此人手中。另外一个人的出牌和赢牌规则都是一样的，如何判断游戏结束呢？就是两个人当中只要有一个人手中的牌没有了，即队列为空q.head==q.tail时，就输了。
代码：
#include<stdio.h>
struct queue{
	int data[1001];
	int head;
	int tail;
};
struct stack{
	int data[10];
	int top;
};
int main(){
	struct queue q1,q2;
	struct stack s;
	int book[10];
	int temp,i;
	
	//init
	q1.head=1,q1.tail=1;
	q2.head=1,q2.tail=1;
	s.top=0;
	
	//初始化用来标记的数组，用来标记哪些牌已经在桌子上
	for(i=1;i<=9;i++)
	 book[i]=0;
	
	//依次向两个人手中插入6张牌
	for(i=1;i<=6;i++){
		scanf("%d",&q1.data[q1.tail]);
		q1.tail++;
	} 
	for(i=1;i<=6;i++){
		scanf("%d",&q2.data[q2.tail]);
		q2.tail++;
	} 
	
	
	while(q1.head<q1.tail&&q2.head<q2.tail){ //当两个人手上都有牌时
	   temp=q1.data[q1.head];//q1出了一张牌 
	   if(book[temp]==0){ //桌上没有这张牌 ,q1未赢 
	   	  q1.head++; //q1打出一张牌，打出的牌出队 
	   	  s.top++;
	   	  s.data[s.top]=temp; //该牌放在桌上，即入栈 
		  book[temp]=1;//标记该牌已经在桌子上 
	   }else{ //q1赢了 
	       q1.head++;
	       q1.data[q1.tail]=temp;//把该牌放在牌的末尾
		   q1.tail++;
		   while(s.data[s.top]!=temp){ //把桌上可以赢得的牌依次放到手中牌的末尾
		      book[s.data[s.top]]=0;
			  q1.data[q1.tail]=s.data[s.top];
			  q1.tail++;
			  s.top--;
		   } 
		   //收回那张桌上为t的牌
		   book[s.data[s.top]]= 0;
		   q1.data[q1.tail]=s.data[s.top];
		   q1.tail++;
		   s.top--;
	   	  	
	   }
	   if(q1.head==q1.tail) break; //若q1的牌已经打完，游戏结束
	   
	   temp=q2.data[q2.head];//q2出了一张牌 
	   if(book[temp]==0){ //桌上没有这张牌 ,q2未赢 
	   	  q2.head++; //q2打出一张牌，打出的牌出队 
	   	  s.top++;
	   	  s.data[s.top]=temp; //该牌放在桌上，即入栈 
		  book[temp]=1;//标记该牌已经在桌子上 
	   }else{ //q1赢了 
	       q2.head++;
	       q2.data[q2.tail]=temp;//把该牌放在牌的末尾
		   q2.tail++;
		   while(s.data[s.top]!=temp){ //把桌上可以赢得的牌依次放到手中牌的末尾
		      book[s.data[s.top]]=0;
			  q2.data[q2.tail]=s.data[s.top];
			  q2.tail++;
			  s.top--;
		   } 
		   //收回那张桌上为t的牌
		   book[s.data[s.top]]= 0;
		   q2.data[q2.tail]=s.data[s.top];
		   q2.tail++;
		   s.top--;
	   	  }	
	   }
	   if(q2.head==q2.tail){
	   	  printf("第一个人出牌的win\n");
		  printf("此时他手中的牌是:");
		  for(i=q1.head;i<q1.tail;i++)
		     printf("%d ",q1.data[i]);
		  if(s.top>0){
		  	printf("桌上的牌是：");
		  	for(i=1;i<=s.top;i++) 
			printf("%d ",s.data[i]);
			
		  }else{
		  	printf("桌上已经没有牌了！");
		  }
	   }else{
	   	   printf("第二个人出牌的win\n");
		  printf("此时他手中的牌是:");
		  for(i=q2.head;i<q2.tail;i++)
		     printf("%d ",q2.data[i]);
		  if(s.top>0){
		  	printf("桌上的牌是：");
		  	for(i=1;i<=s.top;i++) 
			printf("%d ",s.data[i]);
			
		  }else{
		  	printf("桌上已经没有牌了！");
		  }
	   }

	return 0;
}


2018-9-30
set是一个联合集合，可反转，可排序，关键字是唯一的，它只能存储同一类型的值。
代码1：
//set的合集，差集，交集
#include<iostream>
#include<string>
#include<set>
#include<algorithm>
#include<iterator>
using namespace std;
int main(){
	const int N=6;
	string a1[N]={"buffoon","thinkers","for","heavy","can","for"};
	string a2[N]={"metal","any","food","elegant","deliver","for"};
	
	set<string> A (a1,a1+N);
	set<string> B (a2,a2+N);
	
	ostream_iterator<string,char> out(cout," ");
	cout<<" set A:";
	copy(A.begin(),A.end(),out);
	cout<<endl;
	cout<<" set B:";
	copy(B.begin(),B.end(),out);
	cout<<endl; 
	
	cout<<"union of A and B:\n";
	set_union(A.begin(),A.end(),B.begin(),B.end(),out);
	cout<<endl;
	
	cout<<"intersection of A and B:\n";
	set_intersection(A.begin(),A.end(),B.begin(),B.end(),out);
	cout<<endl;
	
	cout<<"difference of A and B:\n";
	set_difference(A.begin(),A.end(),B.begin(),B.end(),out);
	cout<<endl;
	
	set<string> C;
	cout<<" set C:\n";
	set_union(A.begin(),A.end(),B.begin(),B.end(),insert_iterator<set<string> > (C,C.begin()));
	copy(C.begin(),C.end(),out);
	cout<<endl;
	
	string a3 ("grungy");
	C.insert(a3);
	cout<<"new set C:\n ";
	copy(C.begin(),C.end(),out);
	cout<<endl;
	
	cout<<"showing a range:\n";
	copy(C.lower_bound("ghost"),C.upper_bound("spook"),out);
	cout<<endl;
	
	 
	return 0;
} 

//next_permutation
//全排列
#include<iostream>
#include<string>
#include<algorithm>
using namespace std;
int main(){
	string letter;
	while(cin>>letter&&letter!="quit"){
		cout<<"permutation of:"<<letter<<endl;
		sort(letter.begin(),letter.end());
		cout<<letter<<endl;
		while(next_permutation(letter.begin(),letter.end()))
		   cout<<letter<<endl;

	}
	return 0; 
} 

2018-10-1

